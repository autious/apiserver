
Bluemix at DreamHackathon!
===================

[TOC]

Bluemix
---
**What is Bluemix?**
> Bluemix is a Platform as a Service offering from IBM where you host and run your code in the Cloud. More info at [Wikipedia][wiki_bluemix], [PaaS][wiki_paas], and of course [Bluemix.net][bluemix]. Bluemix compared to vanilla Cloud Foundry extends the platform by adding a [catalog of enterprise grade services][bluemix_catalog] (databases, SMS integration, IoT, Watson (famous from Jeopardy!), etc) that developers can easily integrate into their apps. 

**Why use Bluemix?**
> Bluemix is built upon the open source framework called [Cloud Foundry][cf], which enables a developer to push a wide range of code languages (polyglot) to the Cloud, where the platform handles all the setup, configuration and deployment of your code. 

> Bluemix pricing is Pay-as-you-Go. Use a little memory = no cost, use some more memory and data = pricing scales. Use the [pricing calculator][price_calc] based on how much RAM and resource usage you expect.

> Also, Bluemix will *not hibernate* your apps if there is no activity over a long time.

**How to use Bluemix?**
> Developers will still do most of their work on their devstations and push their code to Bluemix when they are ready to run it live for general use. This guide will show easy steps how to get up and running with a sample app suitable to this hackathon. 

Playtomic
---
**What is Playtomic**
> A sample app very much suited for this hackathon is the Playtomic API Server. Deployed on the cloud, the app provides a backend service for game developers to handle things such as achievements, leaderboards, player levels, gamevars, geoip and in-game newsletter subscription.

**Why use Playtomic**
> It's a platform for your game compatible with most gaming platforms. Playtomic has extensive documentation, compatibility and tests/examples for most gaming platforms.

**How to use Playtomic**
> See the [game api documentation][playtomic_apis] at Playtomic website. Basically add libraries to your game that handles all the calls to and from Playtomic.

**Example libraries**
- **Unity3d**
- ActionScript 3
- Android / Java
- Haxe / OpenFL
- HTML5 / JavaScript
- iOS / Objective C
- Mono and .NET

Getting started
---
**Prerequisites**
- Basic knowledge of [git][git]
- [Bluemix Account][bluemix] - Signup for 30 day free trial
- [Cloud Foundry (cf) CLI tool][cf_tool] for push and operations from terminal

Most of the steps in this guide can also be made from the Bluemix webgui dashboard.


Install & Commit
---
Begin by cloning the forked [Playtomic git repo][github_repo] to your dev station.
This code is slightly modified from the original repo to play nice on Bluemix.
```
$ git clone https://github.com/lorentzlasson/apiserver.git
$ cd apiserver
// install all dependencies
$ npm install 
```

A quick overview of the project structure shows that this project uses:
>- node.js 
- express framework
- mongodb
- mailchimp

If you have [Node.js][nodejs] and [MongoDB][mongodb] installed locally, you can start the Playtomic API by issuing from a terminal
```
$ node web.js
```
> **Note:**

> The app(host)name for your application must be unique since it will be on the form **hostname.mybluemix.net** and the services set in the manifest must exist before you try to push (and start) your app. If no host is specified in the manifest, the app **name** attribute will be the default used.

> Should you not have all services already, you can add --no-start to the cf push command and then later on add and bind the services. More info on [add and bind services][add_bind_service].

A sample manifest.yml (yaml) file for this project looks like the following. The manifest is optional but good practice to include if you want to scale your backend to more instances and/or more memory.

**manifest.yml**:
```
---
applications:
- name: PlaytomicServer
  memory: 256M
  host: bluemixplaytonic
  command: node web.js
  services:
  - mongodb-playtronic
```
For more information on manifest.yml file, [documentation here][cf_manifest]
Useful tool for manifest files, [manifest generator][cf_mangen]

**Action:** Update the hostname to a unique value, like your team name or so. Do a local git commit for extra saving.
```
---
applications:
...
  host: unique_host_value
...
```

Deploy
---

**Login**
Download and install the [Cloud Foundry tool (cf)][cf_tool]. Check that cf is installed by opening a terminal and enter
```
$ cf --version
cf version 6.11.2-2a26d55-2015-04-27T21:11:49+00:00
```
Setup cf to use Bluemix and then login
```
$ cf api https://api.ng.bluemix.net
Setting api endpoint to https://api.ng.bluemix.net...
OK

API endpoint:   https://api.ng.bluemix.net (API version: 2.23.0)   
Not logged in. Use 'cf login' to log in.

```
> **Note:**

> Your default organisation will be named like your email and can be changed. Also, you can belong to several organisations and spaces of other accounts. Great for inviting your team members as developers, managers or other roles when you want to colalborate on development or reconfigure the api backend app.

```
$ cf login
API endpoint: https://api.ng.bluemix.net

Email> oscar.almgren@se.ibm.com

Password> 
Authenticating...
OK

Select an org (or press enter to skip):
1. lorentz.lasson@se.ibm.com
2. oscar.almgren

Org> 2
Targeted org oscar.almgren

Select a space (or press enter to skip):
1. dev
2. stage
3. prod

Space> 1
Targeted space dev
            
API endpoint:   https://api.ng.bluemix.net (API version: 2.23.0)   
User:           oscar.almgren@se.ibm.com   
Org:            oscar.almgren   
Space:          dev   
```

**Push**
Create an instance of MongoDB (hosted by MongoLabs) for the Playtomics Server app
```
// cf create-service service_label service_plan service_name
$ cf create-service mongolab sandbox mongodb-playtronic
Creating service instance mongodb-playtronic in org oscar.almgren / space dev as oscar.almgren@se.ibm.com...
OK
```

From the project root catalog use cf push to deploy your code to Bluemix. This command will look for 
1. manifest.yml (An explicit, but optional!, configuration file)
2. Source code format
2.a A valid package.json since this is a Node.js project

```
$ cf push
Using manifest file /Users/lorentzlasson/Development/Repos/Other/playtomic/manifest.yml

Updating app Playtomic in org lorentz.lasson@se.ibm.com / space dreamhack as lorentz.lasson@se.ibm.com...
OK

Using route playtomic.mybluemix.net
Uploading Playtomic...
Uploading app files from: /Users/lorentzlasson/Development/Repos/Other/playtomic
Uploading 435K, 121 files
Done uploading               
OK
Binding service MongoLab-zd to app Playtomic in org lorentz.lasson@se.ibm.com / space dreamhack as lorentz.lasson@se.ibm.com...
OK

Stopping app Playtomic in org lorentz.lasson@se.ibm.com / space dreamhack as lorentz.lasson@se.ibm.com...
OK

Starting app Playtomic in org lorentz.lasson@se.ibm.com / space dreamhack as lorentz.lasson@se.ibm.com...
	-----> Downloaded app package (116K)
-----> Downloaded app buildpack cache (4.9M)
-----> Node.js Buildpack Version: v1.18-20150519-1759
-----> Resetting git environment
-----> Requested node range:  0.10.32
-----> Resolved node version: 0.10.32
-----> Installing IBM SDK for Node.js from cache
-----> Checking and configuring service extensions
-----> Restoring node_modules directory from cache
-----> Pruning cached dependencies not specified in package.json
       npm WARN package.json PlaytomicAPIServer@0.0.2 No repository field.
-----> Installing dependencies
       npm WARN package.json PlaytomicAPIServer@0.0.2 No repository field.
-----> Caching node_modules directory for future builds
-----> Cleaning up node-gyp and npm artifacts
-----> Building runtime environment
-----> Checking and configuring service extensions
-----> Installing App Management

-----> Uploading droplet (14M)

0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
1 of 1 instances running

App started


OK
Showing health and status for app Playtomic in org lorentz.lasson@se.ibm.com / space dreamhack as lorentz.lasson@se.ibm.com...
OK

requested state: started
instances: 1/1
usage: 128M x 1 instances
urls: playtomic.mybluemix.net
last uploaded: Mon Jun 8 09:06:39 UTC 2015

     state     since                    cpu    memory           disk   
#0   running   2015-06-08 11:07:36 AM   5.5%   111.3M of 128M   58.7M of 1G   
```

Scale
---

**So what to do now?**

Access the Playtomic API Server using one of the libraries found at [Playtomic APIs libraries][playtomic_apis].

Also, a test page for api checks is accessible at ```*hostname*/app/test.html```, which can be used as a base for see how to call using HTML5/Js.

**Scale and Overview**
Login to Bluemix and check your Playtomic instance. You can now adjust number of instances running (for performance or load balancing), add more services if you'd like to experiment and check the logs.

Repeat(?)
---
Nifty ways to automate build and deploy is always appreciated by developers and minimizes manual errors. A set it and forget it kind of setup.

How to set up the **Build & Deploy Pipeline**:

1. Go to [IBM DevOps Services][devops], login using the same credentials as for Bluemix.
2. See the overview of your projects, click '**Create a Project**'.
3. Name the project, click '**Link with Repo**/Authorize Github'.
4. Select the Playtomic repo from the dropdown, extra mark '**Make this a Bluemix Project**', check the deployment details, click '**Create**'. 
5. Project created successfully, check top right corner, click **Build & Deploy** tab.
6. Click '**Add Stage**' and rename the stage, maybe 'Build & Deploy'. Check value for **Stage Trigger** so the pipeline starts on git commit to master branch.
7. Check Jobs and **Add a job** (**Build**) with either 'Simple' or 'npm' builder. For NPM, fill in optional details.
8. Add another job (**Deploy**) and check values, click '**Save**'.
9. Optional, you can now trigger a Build manually by clicking the '**Play**' icon, or add another stage, for example Test + Unit and Integration test scripts. 

For every push to master/origin the code will now be build, deployed and ready to use within minutes. Remember though that diskspace on the Cloud is by nature ephemeral, meaning that a new instance will be spinned up and only what is stored in the git repo and in external data sources will be saved between deployments. If your users upload something, like a profil picture, be sure to save it in the database or some sort of data bucket.

##Now good luck and hack that great collaborative game!


[bluemix]: http://www.bluemix.net/ecod-nordics
[cf_tool]: https://github.com/cloudfoundry/cli/releases
[wiki_bluemix]: http://en.wikipedia.org/wiki/Bluemix
[wiki_paas]: http://en.wikipedia.org/wiki/Platform_as_a_service
[cf]: http://cloudfoundry.org/index.html
[playtomic]: http://playtomic.org/
[playtomics_unity]: http://playtomic.org/api/unity3d.html
[playtomics_android]: http://playtomic.org/api/android.html
[playtomics_ios]: http://playtomic.org/api/ios.html
[github_repo]: https://github.com/lorentzlasson/apiserver
[cf_manifest]: http://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html
[cf_mangen]: http://cfmanigen.mybluemix.net/
[postman]: https://www.getpostman.com/
[curl]: http://curl.haxx.se/
[devops]: https://hub.jazz.net/
[git]: https://git-scm.com/
[nodejs]: https://nodejs.org
[mongodb]: https://www.mongodb.org/
[add_bind_service]: https://www.ng.bluemix.net/docs/services/reqnsi.html#req_instance
[bluemix_catalog]: https://console.ng.bluemix.net/?direct=classic/#/store/cloudOEPaneId=store
[playtomic_apis]: http://playtomic.org/apis.html
[price_calc]: https://console.ng.bluemix.net/pricing/
